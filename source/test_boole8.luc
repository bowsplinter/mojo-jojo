module test_boole8 (
    input clk,  // clock
    input rst,  // reset
    output out, // Used to determine if test passes of fails
    output done, // Used to determine if testing has been completed
    output test_no[4] // Used to identify which test case is being carried out 
  ) {
  
  dff counter[30](.clk(clk), .rst(rst));
  /*
  Counter for us to change our test cases
  It has 30 bits to give the circuit time to change cases
  The case changes at a rate slightly faster then once per second
  */
  sig cases[4]; // Initialises signal cases to only take up to 4 bits, i.e. have 16 test cases
  
  boole8 boole; // This imports the boole8 module for testing

  always {
    done = 0;
    out = 2;
    boole.a = 8b0; // Initialising input a to boole to be 8 bits
    boole.b = 8b0; // Initialising input b to boole to be 8 bits
    cases = counter.q[29:26];
    /* 
     This allows the changing of the cases
     by reading the 26th to 29th bit of the clk
     which will be changing continuously.
     Values will range from 0000 to 1111 in binary
    */ 
    boole.alufn = cases;
    /*
    As the cases will vary from 0000 to 1111 in binary,
    this will allow us to test all 16 operations of the boolean module
    as the boolean logic is determined by the alufn inputs into the boolean module
    which ranges from 0000 to 1111 in binary
    */
    counter.d = counter.q +1; // This will increment the last bit of the counter.q by 1 every clk tick, allowing case to change
      case(cases){
        4b0000: // Test Case to return all 0s as output
           boole.a = 8b00110111;
           boole.b = 8b10110101;
           out = (boole.out == 8b0000000);
           test_no = 4b0000;
        4b0001: // Test case for NOR logic
           boole.a = 8b11110001;
           boole.b = 8b00001001;
           out = (boole.out == 8b00000110);
           test_no = 4b0001;
        4b0010: // Test case for A > B Logic
           boole.a = 8b11011100;
           boole.b = 8b10011011;
           out = (boole.out == 8b01000100);
           test_no = 4b0010;
        4b0011: // Test case for NOT B logic
           boole.a = 8b00110111;
           boole.b = 8b01101010;
           out = (boole.out == 8b10010101);
           test_no = 4b0011;
        4b0100: // Test case for B > A logic
           boole.a = 8b00110100;
           boole.b = 8b00011001;
           out = (boole.out == 8b00001001);
           test_no = 4b0100;
        4b0101: // Test case for NOT A logic
           boole.a = 8b11010111;
           boole.b = 8b01111101;
           out = (boole.out == 8b00101000);
           test_no = 4b0101;
        4b0110: // Test case for XOR logic
           boole.a = 8b10110101;
           boole.b = 8b10111101;
           out = (boole.out == 8b00001000);
           test_no = 4b0110;
        4b0111: // Test case for NAND logic
           boole.a = 8b11111010;
           boole.b = 8b11011010;
           out = (boole.out == 8b00100101);
           test_no = 4b0111;
        4b1000: // Test case for AND logic
           boole.a = 8b11010010;
           boole.b = 8b10011001;
           out = (boole.out == 8b10010000);
           test_no = 4b1000;
        4b1001: // Test case for XNOR logic
           boole.a = 8b01101101;
           boole.b = 8b01100011;
           out = (boole.out == 8b11110001);
           test_no = 4b1001;
        4b1010: // Test case for return A logic
           boole.a = 8b00011111;
           boole.b = 8b11111100;
           out = (boole.out == 8b00011111);
           test_no = 4b1010;
        4b1011: // Test case for B <= A logic
           boole.a = 8b01110110;
           boole.b = 8b01111110;
           out = (boole.out == 8b11110111);
           test_no = 4b1011;
        4b1100: // Test case for return B logic
           boole.a = 8b01010010;
           boole.b = 8b10100101;
           out = (boole.out == 8b10100101);
           test_no = 4b1100;
        4b1101: // Test case for A <= B logic
           boole.a = 8b11100101;
           boole.b = 8b10011010;
           out = (boole.out == 8b10011010);
           test_no = 4b1101;
        4b1110: // Test case for OR logic
           boole.a = 8b00001000;
           boole.b = 8b01001001;
           out = (boole.out == 8b01001001);
           test_no = 4b1110;
        4b1111: // Test case for return all '1's logic
           boole.a = 8b11001011;
           boole.b = 8b00110010;
           out = (boole.out == 8b11111111);
           test_no = 4b1111;
           done = 1; // Indicates that all test cases have been completed
        default:
          out = 2;
          test_no = 0;
      }
   }
}
