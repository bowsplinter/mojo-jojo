/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_adder8_4 (
    input clk,
    input rst,
    output reg out,
    output reg done
  );
  
  
  
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [2:0] cases;
  
  wire [8-1:0] M_add_ao;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  wire [8-1:0] M_add_out;
  reg [8-1:0] M_add_a;
  reg [8-1:0] M_add_b;
  reg [1-1:0] M_add_alufn;
  adder8_5 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .ao(M_add_ao),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n),
    .out(M_add_out)
  );
  
  always @* begin
    M_counter_d = M_counter_q;
    
    done = 1'h0;
    M_add_a = 8'h00;
    M_add_b = 8'h00;
    M_add_alufn = 1'h0;
    cases = M_counter_q[24+2-:3];
    M_counter_d = M_counter_q + 1'h1;
    
    case (cases)
      3'h0: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h02);
      end
      3'h1: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h03);
      end
      3'h2: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h02);
      end
      3'h3: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h03);
      end
      3'h4: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h02);
      end
      3'h5: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h03);
      end
      3'h6: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h02);
      end
      3'h7: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_add_alufn = 1'h0;
        out = (M_add_out == 8'h03);
        done = 1'h1;
      end
      default: begin
        out = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
